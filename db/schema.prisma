// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  district       String
  municipality   String?
  email          String   @unique
  profilePicture String?
  hashedPassword String?
  role           Role     @default(USER)

  coursesCreated    Course[]
  courseMemberships CourseMembership[]

  courseApplication        CourseApplication[]
  courseApplicationMessage CourseApplicationMessage[]
  courseReview             CourseReview[]

  posts    Post[]
  comments Comment[]
  replies  Reply[]

  chats    Chat[]
  messages Message[]

  tokens   Token[]
  sessions Session[]
}

model Course {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String           @unique
  description     String
  knowledgeLevels KnowledgeLevel[]
  methods         TeachingMethod[]
  status          CourseStatus     @default(HIDDEN)
  previewImage    String
  hourlyRate      Int

  disciplineId   Int
  discipline     Discipline      @relation(fields: [disciplineId], references: [id])
  knowledgeAreas KnowledgeArea[]

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  applications  CourseApplication[]
  usersEnrolled CourseMembership[]

  posts        Post[]
  reviews      CourseReview[]
  Notification Notification[]
}

model Discipline {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  knowledgeAreas KnowledgeArea[]
  courses        Course[]

}

model KnowledgeArea {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  courses      Course[]

  @@unique([name, disciplineId])
}

model CourseMembership {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  weeklyHours    Int
  weeklySchedule String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])
}

// model WeeklySession {
//   id        Int      @id @default(autoincrement())
//   day       WeekDay
//   startTime DateTime @db.Time
//   endTime   DateTime @db.Time

//   courseMembershipId Int
//   courseMembership   CourseMembership @relation(fields: [courseMembershipId], references: [id])
// }

model CourseApplication {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  description       String
  availableSchedule String

  status   CourseApplicationStatus    @default(PENDING)
  messages CourseApplicationMessage[]

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  applicantId Int
  applicant   User @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

// model AvailableSession {
//   id        Int      @id @default(autoincrement())
//   day       WeekDay
//   startTime DateTime @db.Time
//   endTime   DateTime @db.Time

//   courseApplication   CourseApplication? @relation(fields: [courseApplicationId], references: [id])
//   courseApplicationId Int?
// }

model CourseApplicationMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String

  courseApplicationId Int
  courseApplication   CourseApplication @relation(fields: [courseApplicationId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

model CourseReview {
  createdAt DateTime @default(now())

  rating  Int
  content String

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@id([courseId, authorId])
}

model Chat {
  id         Int       @id @default(autoincrement())
  lastActive DateTime
  users      User[]    @relation(references: [id])
  messages   Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String
  files       File[]
  comments    Comment[]

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])


}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  replies   Reply[]
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model File {
  id     Int    @id @default(autoincrement())
  name   String
  url    String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([hashedToken, type])
}

model Notification {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  type      NotificationType
  courseId  Int
  course    Course           @relation(fields: [courseId], references: [id])
  entityId  Int

  @@unique([type, entityId])
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  RESET_PASSWORD
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum CourseApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum KnowledgeLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  FIRSTCYCLE
  SECONDCYCLE
  THIRDCYCLE
  SECONDARY
  BACHELOR
  MASTER
}

enum TeachingMethod {
  ONLINE
  PRESENTIAL
}

enum CourseStatus {
  HIDDEN
  ACTIVE
  INACTIVE
}

enum NotificationType {
  APPLICATION
  MEMBERSHIP
}
